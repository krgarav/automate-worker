const {
  keyboard,
  mouse,
  screen,
  Button,
  Point,
  Key,
} = require("@nut-tree-fork/nut-js");

// Set speed and config (optional but recommended)
keyboard.config.autoDelayMs = 150;
mouse.config.autoDelayMs = 100;

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function simulateTyping() {
  const lines = [
    "const handleToolbarClick = (args) => {",
    '  if (args.item.id.includes("excelexport")) {',
    "    gridRef.current.refresh(); // Ensure the grid data is refreshed",
    "    gridRef.current.excelExport();",
    "  }",
    '  if (args.item.id.includes("pdfexport")) {',
    "    gridRef.current.refresh(); // Ensure the grid data is refreshed",
    "    gridRef.current.pdfExport();",
    "  }",
    '  if (args.item.id.includes("csvexport")) {',
    "    gridRef.current.refresh(); // Ensure the grid data is refreshed",
    "    gridRef.current.csvExport();",
    "  }",
    "};",
    "const handleStop = async () => {",
    "  try {",
    "    if (!isPaused) {",
    "      setIsPaused(true);",
    "      await pauseScanning();",
    '      toast.warning("Scanning paused");',
    "    } else {",
    "      setIsPaused(false);",
    "      await resumeScanning();",
    '      toast.info("Scanning resumed");',
    "    }",
    "  } catch (error) {",
    '    console.error("Error toggling scan state:", error);',
    '    toast.error("Failed to toggle scanning state");',
    "  }",
    "};",
    "const columnsDirective = headData.map((item, index) => {",
    "  return (",
    "    <ColumnDirective",
    "      field={item}",
    "      key={index}",
    "      headerText={item}",
    '      width="120"',
    '      textAlign="Center"',
    "    ></ColumnDirective>",
    "  );",
    "});",
    "// const completeJobHandler = async () => {",
    "//   try{",
    '//   const result = window.confirm("Are you sure to finish the job ?");',
    "//   if (!result) {",
    "//     return;",
    "//   }",
    '//   const id = localStorage.getItem("jobId");',
    '//   const templateId = localStorage.getItem("scantemplateId");',
    "//",
    "//   const obj = {",
    "//     id: id,",
    "//     templateId: templateId,",
    "//   };",
    "//   const res = await finishJob(obj);",
    "//   if (res?.success) {",
    '//     const token = localStorage.getItem("token");',
    "//",
    "//     if (token) {",
    "//       const userInfo = jwtDecode(token);",
    "//       const userId = userInfo.UserId;",
    "//       const response2 = await getUrls();",
    "//       const GetDataURL = response2?.GENERATE_EXCEL;",
    "//       const excelgenerate =  axios.get(",
    "//         GetDataURL + `?Id=${selectedValue}&UserId=${userId}`",
    "//       );",
    "//     }",
    '//     toast.success("Completed the job!!");',
    '//     navigate("/admin/job-queue", { replace: true });',
    "//   }",
    "// }catch(err){",
    '//   console.log("Error Occured",err);',
    '//   toast.error("Error Occured during saving the job!");',
    "// }",
    "// };",
    "",
    "const completeJobHandler = async () => {",
    "  try {",
    '    const result = window.confirm("Are you sure to finish the job?");',
    "    if (!result) {",
    "      return;",
    "    }",
    "",
    '    const id = localStorage.getItem("jobId");',
    '    const templateId = localStorage.getItem("scantemplateId");',
    "",
    "    if (!id || !templateId) {",
    '      toast.error("Required data is missing!");',
    "      return;",
    "    }",
    "",
    "    const obj = { id, templateId };",
    "    const res = await finishJob(obj);",
    "",
    "    if (res?.success) {",
    '      const token = localStorage.getItem("token");',
    "",
    "      // if (token) {",
    "      //   // const userInfo = jwtDecode(token);",
    "      //   // const userId = userInfo.UserId;",
    "",
    "      //   // const response2 = await getUrls();",
    "      //   // const GetDataURL = response2?.GENERATE_EXCEL;",
    "",
    "      //   try {",
    "      //     // Fire and forget",
    "      //     // axios.get(`${GetDataURL}?Id=${selectedValue}&UserId=${userId}`);",
    "      //   } catch (error) {",
    '      //     console.error("Excel generation failed", error);',
    "      //   }",
    "      // }",
    "",
    '      toast.success("Completed the job!");',
    '      setTimeout(() => navigate("/admin/job-queue", { replace: true }), 500); // Delay for toast visibility',
    "    }",
    "  } catch (err) {",
    '    console.error("Error occurred", err);',
    '    toast.error("Error occurred during saving the job!");',
    "  }",
    "};",
    "",
    "const rowDataBound = (args) => {",
    "  const cells = args.data; // Access the data for the current row",
    "  Object.keys(cells).forEach((key) => {",
    '    if (cells[key] === null || cells[key] === "") {',
    "      // Apply yellow background color to the cell",
    "      const cellIndex = args.row.cells.findIndex(",
    "        (cell) => cell.column.field === key",
    "      );",
    "      if (cellIndex !== -1) {",
    '        args.row.cells[cellIndex].style.backgroundColor = "yellow";',
    "      }",
    "    }",
    "  });",
    "};",
    "const handleRefreshData = async () => {",
    "  try {",
    "    setIsRefreshing(true);",
    "    setProcessedData([]);",
    "  } catch (error) {",
    '    toast.error("Could not get data");',
    "    console.log(error);",
    "  } finally {",
    "    setIsRefreshing(false);",
    "  }",
    "};",
    "",
    "// Handle the toggle switch",
    "const handleToggle = (event) => {",
    "  setIsAutoScrollEnabled(event.target.checked);",
    "",
    "  if (event.target.checked) {",
    '    console.log("Auto Scroll Enabled");',
    "    gridRef.current.refresh();",
    "    // Add functionality to enable auto-scroll here",
    "  } else {",
    '    console.log("Auto Scroll Disabled");',
    "    // Add functionality to disable auto-scroll here",
    "  }",
    "};",
    "const handleOldRefreshData = async () => {",
    "  try {",
    '    const token = localStorage.getItem("token");',
    "    const userInfo = jwtDecode(token);",
    "    const userId = userInfo.UserId;",
    "",
    "    const res = await axios.get(",
    "      proccessUrl + `?Id=${selectedValue}&UserId=${userId}`",
    "    );",
    "    const data = res.data;",
    "",
    "    if (data?.result?.success) {",
    "      const newDataKeys = Object.keys(data.result.data[0]).map((key) => {",
    '        return key.endsWith(".") ? key.slice(0, -1) : key;',
    "      });",
    '      setHeadData(["Serial No", ...newDataKeys]);',
    "",
    "      let updatedData = data.result.data.map((item) => {",
    "        const newItem = {};",
    "        for (const key in item) {",
    '          const newKey = key.endsWith(".") ? key.slice(0, -1) : key;',
    "          newItem[newKey] = item[key];",
    "        }",
    '        newItem["Serial No"] = num++;',
    "        return newItem;",
    "      });",
    "",
    "      setProcessedData((prevData) => {",
    "        const combinedData = [...prevData, ...updatedData];",
    '        const lastSlNo = combinedData[combinedData.length - 1]["Serial No"];',
    '        localStorage.setItem("lastSerialNo", JSON.stringify(lastSlNo));',
    "        if (combinedData.length > 100) {",
    "          return combinedData.slice(-100);",
    "        }",
    "        return combinedData;",
    "      });",
    "    }",
    "    gridRef.current.refresh();",
    "  } catch (error) {",
    "    console.log(error);",
    "  }",
    "};",
    "const onRowSelected = (args) => {",
    "  const rowData = args.data;",
    '  // console.log("Row selected:", args);',
    '  // console.log("Row selected:", rowData);',
    "  setIsViewerOpen(true);",
    "  setCurrentImage(rowData?.FileName);",
    "};",
    "",
    "const onCellSelected = (args) => {",
    "  const rowData = args.data; // same as args.rowData",
    "  const columnField = args.currentCell.cellIndex;",
    "  const obj = Object.keys(rowData);",
    "  const columnHeader = obj[columnField];",
    "",
    '  console.log("Cell selected:", {',
    "    row: rowData,",
    "    columnField,",
    "    columnHeader,",
    "    fullArgs: args,",
    "  });",
    "  const filter = templateData.filter(",
    "    (item) => item.fieldName === columnHeader",
    "  );",
    "  if (filter && filter[0]) {",
    "    const { x, y, width, height } = filter[0];",
    "    setObj({ x, y, width, height });",
    "  }",
    "",
    '  // console.log("Row data:", templateData);',
    "  setIsViewerOpen(true);",
    "  setCurrentImage(rowData?.FileName);",
    "};",
    "const closeImageViewer = () => {",
    "  setIsViewerOpen(false);",
    '  console.log("Image viewer closed");',
    "};",
    "",
    "return (",
    "  <>",
    "    <NormalHeader />",
    "    <div",
    "      style={{",
    '        position: "absolute",',
    '        top: "20px",',
    '        padding: "10px",',
    '        zIndex: "999",',
    "      }}",
    "    >",
    "      <nav",
    '        style={{ "--bs-breadcrumb-divider": "\'>\'" }}',
    '        aria-label="breadcrumb"',
    "      >",
    '        <ol className="breadcrumb" style={{ fontSize: "0.8rem" }}>',
    '          <li className="breadcrumb-item">',
    '            <Link to="/admin/job-queue">Job queue</Link>',
    "          </li>",
    '          <li className="breadcrumb-item active" aria-current="page">',
    "            {templateName}",
    "          </li>",
    "        </ol>",
    "      </nav>",
    "    </div>",
    "    <div",
    "      style={{",
    '        position: "absolute",',
    '        left: isSmallScreen ? "30%" : "40%",',
    '        top: isSmallScreen ? "10px" : "20px",',
    '        zIndex: "999",',
    "      }}",
    "    >",
    '      <Button variant="primary" onClick={completeJobHandler}>',
    "        Complete Job",
    "      </Button>",
    "    </div>",
    '    <Container className={isSmallScreen ? "mt--6" : "mt--8"} fluid>',
    "      <br />",
    "",
    '      {/* <div className="control-pane"> */}',
    "      <div",
    '        className="w-100  m-1"',
    '        style={{ overflowY: "auto", backgroundColor: "green", zIndex: "999" }}',
    "      ></div>",
    '      <div className="control-section">',
    "        <GridComponent",
    "          ref={gridRef}",
    "          dataBound={dataBound}",
    "          actionComplete={handleSave}",
    "          dataSource={processedData}",
    "          height={gridHeight}",
    "          allowSorting={false}",
    "          editSettings={editSettings}",
    "          allowFiltering={false}",
    "          filterSettings={filterSettings}",
    "          toolbar={toolbar}",
    "          enableVirtualization={isAutoScrollEnabled}",
    "          rowSelected={onRowSelected}",
    "          rowDataBound={rowDataBound}",
    "          toolbarClick={handleToolbarClick}",
    "          cellSelected={onCellSelected}",
    "          refresh={refresh}",
    "          allowPaging={true}",
    "          pageSettings={pageSettings}",
    "        >",
    "          <ColumnsDirective>{columnsDirective}</ColumnsDirective>",
    "          <Inject services={[Page, Toolbar, Edit, Filter]} />",
    "        </GridComponent>",
    "      </div>",
    "      {/* </div> */}",
    "      <br />",
    "      <Row>",
    '        <Col md={6} className="d-flex justify-content-start">',
    "          <Form.Check",
    '            type="switch"',
    '            id="autoScrollSwitch"',
    '            label="Auto Scroll"',
    "            checked={isAutoScrollEnabled}",
    "            onChange={handleToggle}",
    "          />",
    "        </Col>",
    '        <Col md={6} className="d-flex justify-content-end">',
    "          <Button",
    '            variant="primary"',
    "            onClick={handleRefreshData}",
    "            disabled={isRefreshing}",
    "          >",
    "            Refresh",
    "          </Button>",
    "        </Col>",
    "      </Row>",
    "      <br />",
    "    </Container>",
    "    <ImageViewer",
    "      isOpen={isViewerOpen}",
    "      currentImage={currentImage}",
    "      onClose={closeImageViewer}",
    "      zoomSpeed={0.5}",
    '      backgroundStyle={{ backgroundColor: "rgba(0, 0, 0, 0.9)" }}',
    "      closeOnClickOutside={true}",
    "      disableScroll={false}",
    "    />",
    "  </>",
    ");",
  ];

  const text = lines[randomInt(0, lines.length - 1)];
  await keyboard.type(text);
  await keyboard.pressKey(Key.Enter);
  await keyboard.releaseKey(Key.Enter);
  console.log("Typed:", text);
}

async function simulateMouseMovement() {
  const { width, height } = (await screen.width()) && (await screen.height());
  const x = randomInt(100, width - 100);
  const y = randomInt(100, height - 100);
  await mouse.move([new Point(x, y)]);
  console.log("Moved mouse to:", x, y);
}

async function simulateAltTab() {
  await keyboard.pressKey(Key.LeftAlt);
  await keyboard.pressKey(Key.Tab);
  await keyboard.releaseKey(Key.Tab);
  await keyboard.releaseKey(Key.LeftAlt);
  console.log("Performed Alt+Tab");
}

async function simulateActivity() {
  const action = randomInt(1, 3);

  switch (action) {
    case 1:
      await simulateTyping();
      break;
    case 2:
      await simulateMouseMovement();
      break;
    case 3:
      await simulateAltTab();
      break;
  }
}

// Run random activity every 10–20 seconds
setInterval(async () => {
  try {
    await simulateActivity();
  } catch (err) {
    console.error("Error simulating activity:", err);
  }ā
}, randomInt(5000, 6000));
 
 